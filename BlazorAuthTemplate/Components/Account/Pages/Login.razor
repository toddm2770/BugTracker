@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorAuthTemplate.Data
@using static BlazorAuthTemplate.Models.Enums

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>


<div class="container-fluid bg-1100 h-100">
	<div class="row">
		<div class="col-md-4"></div>
		<div class="col-md-4">
			<section>
				<StatusMessage Message="@errorMessage" />
				<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
					<DataAnnotationsValidator />
					<h2 class="text-white">Log in to existing account</h2>
					<hr />
					<ValidationSummary class="text-danger" role="alert" />
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
						<label for="email" class="form-label">Email</label>
						<ValidationMessage For="() => Input.Email" class="text-danger" />
					</div>
					<div class="form-floating mb-3">
						<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
						<label for="password" class="form-label">Password</label>
						<ValidationMessage For="() => Input.Password" class="text-danger" />
					</div>
					<div class="checkbox mb-3">
						<label class="form-label">
							<InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
							Remember me
						</label>
					</div>
					<div>
						<button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
					</div>
					<div>
						<p class="mt-3">
							<a href="Account/ForgotPassword">Forgot your password?</a>
						</p>
						<p>
							<a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
						</p>
						<p>
							<a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
						</p>
					</div>
				</EditForm>
				<div class="card bg-1000">
					<div class="card-body">
						<h3 class="card-title text-white">Log in as a Demo User</h3>
						<p class="text-white">Click one of the buttons below to log in with a demo account</p>
						<EditForm id="demo-account" Model="Input" method="post" OnSubmit="LoginDemoUser" FormName="demo">
							<div class="vstack text-center gap-2 px-3">
								<button class="btn btn-outline-success" type="submit" name="Input.DemoRole" value="@Roles.Admin">
									Admin
								</button>
								<button class="btn btn-outline-success" type="submit" name="Input.DemoRole" value="@Roles.ProjectManager">
									Project Manager
								</button>
								<button class="btn btn-outline-success" type="submit" name="Input.DemoRole" value="@Roles.Developer">
									Developer
								</button>
								<button class="btn btn-outline-success" type="submit" name="Input.DemoRole" value="@Roles.Submitter">
									Submitter
								</button>
							</div>
						</EditForm>
					</div>
				</div>
			</section>
		</div>
		<div class="col-md-4"></div>
	</div>
</div>

@code {
	private string? errorMessage;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			// Clear the existing external cookie to ensure a clean login process
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	public async Task LoginUser()
	{
		// This doesn't count login failures towards account lockout
		// To enable password failures to trigger account lockout, set lockoutOnFailure: true
		var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
		if (result.Succeeded)
		{
			Logger.LogInformation("User logged in.");
			RedirectManager.RedirectTo(ReturnUrl);
		}
		else if (result.RequiresTwoFactor)
		{
			RedirectManager.RedirectTo(
				"Account/LoginWith2fa",
				new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("Account/Lockout");
		}
		else
		{
			errorMessage = "Error: Invalid login attempt.";
		}
	}

	public async Task LoginDemoUser()
	{
		if (Input.DemoRole != null)
		{
			string email = Input.DemoRole switch
			{
				Roles.Admin => "demoadmin@bugtracker.com",
				Roles.ProjectManager => "demopm@bugtracker.com",
				Roles.Developer => "demodev@bugtracker.com",
				Roles.Submitter => "demosub@bugtracker.com",
				_ => ""
			};

			ApplicationUser? user = await UserManager.FindByEmailAsync(email);
			if (user != null)
			{
				await SignInManager.SignInAsync(user, false);
				RedirectManager.RedirectTo(ReturnUrl);
			}
		}

		errorMessage = "Error: Invalid login attempt.";
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; } = "";

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		[Display(Name = "Remember me?")]
		public bool RememberMe { get; set; }

		public Roles? DemoRole { get; set; }
	}
}
