@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.Client.Services.Interfaces
@using BlazorAuthTemplate.Data
@using BlazorAuthTemplate.Helpers
@using BlazorAuthTemplate.Models
@using BlazorAuthTemplate.Client.Helpers
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext _context
@inject ICompanyService CompanyService

<PageTitle>Register</PageTitle>
<div class="container-fluid h-100 bg-1100">
	<div class="row">
		<div class="col-4"></div>
		<div class="col-md-4">
			<StatusMessage Message="@Message" />
			<EditForm Model="Input"
					  asp-route-returnUrl="@ReturnUrl"
					  method="post"
					  OnValidSubmit="RegisterUser"
					  FormName="register"
					  enctype="multipart/form-data">
				<DataAnnotationsValidator />
				<h2 class="mt-3 text-white">Create a new account</h2>
				<hr />
				<ValidationSummary class="text-danger" role="alert" />
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
					<label for="email">Email</label>
					<ValidationMessage For="() => Input.Email" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
					<label for="password">Password</label>
					<ValidationMessage For="() => Input.Password" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
					<label for="confirm-password">Confirm Password</label>
					<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="firstname" />
					<label for="firstname">First Name</label>
					<ValidationMessage For="() => Input.FirstName" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="lastname" />
					<label for="firstname">Last Name</label>
					<ValidationMessage For="() => Input.LastName" class="text-danger" />
				</div>
				<h2 class="text-white">Create a new company</h2>
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.CompanyName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="lastname" />
					<label for="firstname">Company Name</label>
					<ValidationMessage For="() => Input.CompanyName" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputTextArea @bind-Value="Input.CompanyDescription" class="form-control" autocomplete="lastname" aria-required="true" placeholder="lastname" />
					<label for="firstname">Company Description</label>
					<ValidationMessage For="() => Input.CompanyDescription" class="text-danger" />
				</div>
				<button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
			</EditForm>
		</div>
		<div class="col-4"></div>
	</div>
</div>

@code {
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";



	public async Task RegisterUser(EditContext editContext)
	{
		CompanyDTO newCompany = CreateCompany();

		newCompany.Name = Input.CompanyName;
		newCompany.Description = Input.CompanyDescription;

		CompanyDTO company = await CompanyService.CreateCompanyAsync(newCompany);

		var user = CreateUser();
		user.FirstName = Input.FirstName;
		user.LastName = Input.LastName;
		user.CompanyId = company.Id;
		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		var result = await UserManager.CreateAsync(user, Input.Password);
		Logger.LogInformation("User created a new account with password.");

		await CompanyService.CreateAdmin(user.Id, company.Id);

		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		if (UserManager.Options.SignIn.RequireConfirmedAccount)
		{
			RedirectManager.RedirectTo(
				"Account/RegisterConfirmation",
				new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
		}

		await SignInManager.SignInAsync(user, isPersistent: false);
		RedirectManager.RedirectTo(ReturnUrl);
	}


	private ApplicationUser CreateUser()
	{

		try
		{
			return Activator.CreateInstance<ApplicationUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
				$"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private CompanyDTO CreateCompany()
	{
		try
		{
			return Activator.CreateInstance<CompanyDTO>();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private IUserEmailStore<ApplicationUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<ApplicationUser>)UserStore;
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

		[Required]
		[StringLength(50, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
		[Display(Name = "First Name")]
		public string FirstName { get; set; } = "";

		[Required]
		[StringLength(50, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
		[Display(Name = "Last Name")]
		public string LastName { get; set; } = "";

		// [Display(Name = "Profile Picture")]
		// public IFormFile? ProfiilePicture { get; set; }

		[Required]
		[Display(Name = "Company Name")]
		public string CompanyName { get; set; } = "";

		[Required]
		[Display(Name = "Company Description")]
		public string CompanyDescription { get; set; } = "";

		[Display(Name = "Company Image")]
		public IFormFile? CompanyImage { get; set; }
	}
}