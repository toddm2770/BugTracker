@page "/"
@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.Client.Services.Interfaces
@using BlazorAuthTemplate.Client.Components.UI

@inject ITicketService TicketService
@inject IProjectService ProjectService

<PageTitle>Home</PageTitle>

@rendermode InteractiveServer

@if (userInfo != null)
{


	<div class="container mt-3">
		<div class="hstack justify-content-end">
			<button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addProject">Add Project</button>
			<button class="btn btn-warning ms-2" data-bs-toggle="modal" data-bs-target="#addTicket">Add Ticket</button>
			<h3 class="ms-2">Welcome, @userInfo.FullName</h3>
		</div>
		<div class="row mt-2">
			<div class="col-12 col-md-4">
				<h2>Company Name Placeholder</h2>
				<img src="/image/DefaultCompanyImage.jpg" style="width: 400px; height: auto" />
				<h5 class="mt-3">Company description placeholder Company description placeholder Company description placeholder Company description placeholder Company description placeholder Company description placeholder </h5>
			</div>
			<div class="col-12 col-md-8">

				<h3 class="text-end">Published Projects</h3>
				<div class="modal fade" id="addProject" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
					<div class="modal-dialog">
						<div class="modal-content">
							<div class="modal-header">
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								<ProjectForm Project="newProject" OnSubmit="AddProject" OnCancel="CancelAddProject" />
							</div>
						</div>
					</div>
				</div>

				<div class="modal fade" id="addTicket" tabindex="-1" aria-labelledby="addTicketLabel" aria-hidden="true">
					<div class="modal-dialog">
						<div class="modal-content">
							<div class="modal-header">
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								<TicketForm Ticket="newTicket" OnSubmit="AddTicket" OnCancel="CancelAddTicket" />
							</div>
						</div>
					</div>
				</div>

				<table class="table table-striped">
					<thead>
						<tr>
							<th scope="col">Project Name</th>
							<th scope="col" class="text-end">Priority</th>
							<th scope="col" class="text-end">Ticket Count</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var Project in projects)
						{
							<tr>
								<td>@Project.Name</td>
								<td class="text-end">@Project.Priority</td>
								<td class="text-end">@Project.Tickets?.Count()</td>
							</tr>
						}
					</tbody>
				</table>

				<h3 class="mt-3">Archived Projects</h3>
				<table class="table table-striped">
					<thead>
						<tr>
							<th scope="col">Project Name</th>
							<th scope="col" class="text-end">Priority</th>
							<th scope="col" class="text-end">Ticket Count</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var Project in archivedProjects)
						{
							<tr>
								<td>@Project.Name</td>
								<td class="text-end">@Project.Priority</td>
								<td class="text-end">@Project.Tickets?.Count()</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
}
else
{
	<div class="d-flex h-100 flex-column justify-content-center container-xxl">
		<div class="row">
			<div class="col-12 col-md-6 d-flex flex-column">
				<h1>BugTracker</h1>
				<div class="subTitle">
					Lorem ipsum dolor sit amet, consectetur adipiscing elit,
					sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
				</div>
				<div class="mt-2 fw-bold">Built with pride using cutting edge tech:</div>
				<div class="stackIcons">
					<i class="devicon-csharp-plain colored"></i>
					<i class="devicon-blazor-original colored"></i>
					<i class="devicon-dotnetcore-plain colored"></i>
					<i class="devicon-postgresql-plain colored"></i>
					<i class="devicon-bootstrap-plain colored"></i>
				</div>
				<div class="text-center text-md-start">
					<a href="/Account/Login" class="btn btn-large btn-primary rounded-pill">Get Started</a>
				</div>
			</div>
			<div class="col-12 col-md-6 order-first order-md-last">
				<img src="image/undraw_project_complete_lwss.svg" class="img-fluid" />
			</div>
		</div>
	</div>
}

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;

	private CompanyDTO? company { get; set; }

	private IEnumerable<ProjectDTO> projects = [];

	private IEnumerable<ProjectDTO> archivedProjects = [];

	private ProjectDTO? newProject { get; set; }

	public TicketDTO? newTicket { get; set; }

	private enum Status
	{
		Viewing,
		EditingTicket,
		EditingProject
	}

	private Status status = Status.Viewing;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

			if (userInfo != null)
			{
				newProject = new();

				projects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId);

				archivedProjects = await ProjectService.GetArchivedProjects(userInfo.CompanyId);

				newTicket = new();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private async Task AddProject(ProjectDTO project)
	{
		int companyId = userInfo!.CompanyId;

		try
		{
			await ProjectService.AddProjectAsync(project, companyId);

			projects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}

		status = Status.Viewing;

		StateHasChanged();
	}

	public void CancelAddProject()
	{
		status = Status.Viewing;

		newProject = new();

		StateHasChanged();
	}

	public async Task AddTicket(TicketDTO updatedTicket)
	{

		int companyId = userInfo!.CompanyId;

		try
		{
			await TicketService.AddTicketAsync(updatedTicket, companyId);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private void CancelAddTicket()
	{
		status = Status.Viewing;

		newTicket = new TicketDTO();

		StateHasChanged();
	}
}

