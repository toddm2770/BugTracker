@page "/details"

@using BlazorAuthTemplate.Client.Components.UI
@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.Client.Services.Interfaces
@using BlazorAuthTemplate.Models

@rendermode InteractiveServer

@inject IJSRuntime JS
@inject IProjectService ProjectService
@inject ICompanyService CompanyService


<div class="container mt-3">
	<div class="row">
		<div class="col-2">
			<div class="text-end mb-2">
				Published Projects<input type="checkbox" @bind-value="PublishedCheckBox" class="ms-1 me-3" checked />
				Archived Projects<input type="checkbox" @bind-value="ArchivedCheckBox" class="ms-1 me-3" />
			</div>

			@if (PublishedCheckBox == true)
			{
				<h4 class="mt-3">Published Projects:</h4>
				@foreach (var Project in projects)
				{
					<button class="btn btn-link text-start" @onclick="() => SelectProject(Project)"><h4>@Project.Name</h4></button>
					<hr />
				}
			}

			@if (ArchivedCheckBox == true)
			{
				<h4>Archived Projects:</h4>
				@foreach (var Project in archivedProjects)
				{
					<button class="btn btn-link text-start" @onclick="() => SelectProject(Project)"><h4>@Project.Name</h4></button>
					<hr />
				}
			}

		</div>
		<div class="col-10">
			@if (SelectedProject is not null)
			{
				@if (SelectedProject.IsArchived == false)
				{
					<button class="btn btn-warning" @onclick="() =>  ArchiveProject(SelectedProject.Id, SelectedProject.CompanyId, SelectedProject)">
						Archive Project
					</button>
				}
				@if (SelectedProject.IsArchived == true)
				{
					<button class="btn btn-success" @onclick="() =>  RestoreProject(SelectedProject.Id, SelectedProject.CompanyId, SelectedProject)">
						Restore Project
					</button>
				}

				<button class="btn btn-outline-warning ms-3" @onclick="() => status = Status.Editing">
					Edit
				</button>

				if (userInfo is not null && company is not null)
				{
					if (userInfo.Roles is not null && userInfo.Roles.Contains("Admin") || userInfo.Roles is not null && userInfo.Roles.Contains("ProjectManager"))
					{
						if (members is not null)
						{
							<InputSelect @bind-Value="selectedMemberId" class="ms-3">
								@foreach (var member in members.Where(m => m.Role is not null && !m.Role.Contains("Admin") && !m.Role.Contains("ProjectManager")))
								{
									<option value="@member.Id">@member.FullName</option>
								}
							</InputSelect>
							if (selectedMemberId is not null)
							{
								<button class="btn btn-primary ms-3" @onclick="() => AddMember(SelectedProject.Id, selectedMemberId, userInfo.UserId)">
									Add Member
								</button>
							}
						}


					}

					if (userInfo.Roles is not null && userInfo.Roles.Contains("Admin"))
					{
						if (members is not null)
						{
							<InputSelect @bind-Value="selectedManagerId" class="ms-3">
								@foreach (var member in members.Where(m => m.Role is not null && m.Role.Contains("ProjectManager")))
								{
									<option value="@member.Id">@member.FullName</option>
								}
							</InputSelect>
						}
						if (selectedManagerId is not null)
						{
							<button class="btn btn-success ms-3" @onclick="() => AddProjectManager(SelectedProject.Id, selectedManagerId, userInfo.UserId)">
								Add Project Manager
							</button>
						}
					}
				}
			}


			@if (status == Status.Viewing)
			{
				@if (SelectedProject is not null)
				{
					<ProjectDetails Project="SelectedProject"/>
				}

			}

			@if (status == Status.Editing && SelectedProject is not null)
			{
				<ProjectForm Project="SelectedProject" OnSubmit="UpdateProject" OnCancel="CancelEdit"/>
			}

		</div>
	</div>

</div>


@code {
	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;

	private CompanyDTO? company { get; set; }

	private ProjectDTO? project { get; set; }

	private ProjectDTO? SelectedProject { get; set; }

	private TicketDTO? ticket { get; set; }

	private IEnumerable<UserDTO>? members { get; set; }

	private IEnumerable<UserDTO>? projectMembers { get; set; }

	private UserDTO? selectedMember { get; set; }

	private UserDTO? selectedManager { get; set; }

	private string? selectedManagerId { get; set; }

	private string? selectedMemberId;

	private IEnumerable<ProjectDTO> projects = [];

	private IEnumerable<ProjectDTO> archivedProjects = [];

	private IEnumerable<TicketDTO> tickets = [];

	bool PublishedCheckBox = true;

	bool ArchivedCheckBox = false;

	private enum Status
	{
		Viewing,
		Editing
	}

	private Status status = Status.Viewing;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

			if (userInfo != null)
			{
				int companyId = userInfo.CompanyId;

				projects = await ProjectService.GetAllProjectsAsync(companyId);

				archivedProjects = await ProjectService.GetArchivedProjects(companyId);

				company = await CompanyService.GetCompanyByIdAsync(companyId);

				members = await CompanyService.GetCompanyMembersAsync(companyId);

				if (members?.Any() == true)
				{
					selectedMemberId = members.First().Id;
				}

				if (members?.Any() == true){
					selectedManagerId = members.Where(m => m.Role != null && m.Role.Contains("ProjectManager")).First().Id;
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private async Task SelectProject(ProjectDTO Project)
	{
		SelectedProject = Project;

		projectMembers = await ProjectService.GetProjectMembersAsync(SelectedProject.Id, SelectedProject.CompanyId);

		StateHasChanged();
	}

	public async Task ArchiveProject(int projectId, int companyId, ProjectDTO? SProject)
	{

		if (SProject?.Tickets is not null)
		{
			foreach (var ticket in SProject.Tickets)
			{
				ticket.IsArchivedByProject = true;
			}
		}


		try
		{
			await ProjectService.ArchiveProjectAsync(projectId, companyId);

			SelectedProject = SProject;

			SelectedProject!.IsArchived = true;

			projects = await ProjectService.GetAllProjectsAsync(userInfo!.CompanyId);

			archivedProjects = await ProjectService.GetArchivedProjects(companyId);

			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	public async Task RestoreProject(int projectId, int companyId, ProjectDTO SProject)
	{
		if (SProject is not null && SProject.Tickets is not null && SProject.Tickets.Count() != 0)
		{
			foreach (var ticket in SProject.Tickets)
			{
				ticket.IsArchivedByProject = false;
			}
		}

		try
		{
			await ProjectService.RestoreProjectAsync(projectId, companyId);

			SelectedProject = SProject;

			SelectedProject!.IsArchived = false;

			projects = await ProjectService.GetAllProjectsAsync(userInfo!.CompanyId);

			archivedProjects = await ProjectService.GetArchivedProjects(companyId);

			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	public async Task UpdateProject(ProjectDTO updatedProject)
	{
		SelectedProject!.Name = updatedProject.Name;
		SelectedProject.Description = updatedProject.Description;
		SelectedProject.Priority = updatedProject.Priority;
		SelectedProject.StartDate = updatedProject.StartDate;
		SelectedProject.EndDate = updatedProject.EndDate;

		await ProjectService.UpdateProjectAsync(SelectedProject, SelectedProject.CompanyId);
		status = Status.Viewing;
	}

	private async Task CancelEdit()
	{
		await JS.InvokeVoidAsync("eval", "$('#myModal').modal('hide')");

		status = Status.Viewing;
	}

	public async Task AddMember(int projectId, string selectedMemberId, string managerId)
	{
		if(company != null && members != null)
		{
			var companyId = company.Id;
			selectedMember = members.FirstOrDefault(m => m.Id == selectedMemberId);
			if (SelectedProject is not null && selectedMember is not null)
			{
				await ProjectService.AddMemberToProjectAsync(projectId, selectedMemberId, managerId);
				projectMembers = await ProjectService.GetProjectMembersAsync(SelectedProject.Id, SelectedProject.CompanyId);
				SelectedProject = await ProjectService.GetProjectByCompanyId(projectId, companyId);

				StateHasChanged();
			}
		}
	}

	public async Task AddProjectManager(int projectId, string selectedManagerId, string adminId)
	{
		if(company != null && members != null)
		{
			var companyId = company.Id;
			selectedManager = members.FirstOrDefault(m => m.Id == selectedMemberId);
			if (SelectedProject is not null && selectedManager is not null)
			{
				await ProjectService.AssignProjectManagerAsync(projectId, selectedManagerId, adminId);
				projectMembers = await ProjectService.GetProjectMembersAsync(SelectedProject.Id, SelectedProject.CompanyId);
				SelectedProject = await ProjectService.GetProjectByCompanyId(projectId, companyId);

				StateHasChanged();
			}
		}
	}
}
