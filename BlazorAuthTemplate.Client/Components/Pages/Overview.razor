@page "/overview"

@rendermode InteractiveAuto

@inject IProjectService ProjectService
@inject ICompanyService CompanyService

<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

<div class="container-fluid mt-3">
	<div class="row">
		<div class="col-12 col-md-6">
			<div class="card bg-primary mx-3 my-3 p-3">
				<h4 class="text-white">Active Projects:</h4>
				<div class="row g-3">
					@foreach (var project in projects)
					{
						<div class="col-6 col-md-3">
							<div class="card" style="width: 100%; height: 12rem;">
								<div class="card-body">
									<h5 style="display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden;" class="card-title oneline-text">
										@project.Name
									</h5>
									@if (members != null)
									{
										<h6>@members.Count() Members</h6>
									}
									@if (project.Tickets != null)
									{
										<h6>@project.Tickets.Count() Tickets</h6>
									}
									<a href="#" class="btn btn-primary">Details</a>
								</div>
							</div>
						</div>
					}
				</div>
			</div>

			<div class="card bg-warning mx-3 my-3 p-3">
				<h4 class="text-white">Archived Projects:</h4>
				<div class="row g-3">
					@foreach (var project in archivedProjects)
					{
						<div class="col-6 col-md-3">
							<div class="card" style="width: 100%; height: 12rem;">
								<div class="card-body">
									<h5 style="display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden;" class="card-title oneline-text">
										@project.Name
									</h5>
									@if (members != null)
									{
										<h6>@members.Count() Members</h6>
									}
									@if (project.Tickets != null)
									{
										<h6>@project.Tickets.Count() Tickets</h6>
									}
									<a href="#" class="btn btn-primary">Details</a>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
		</div>


		<div class="col-12 col-md-6">
			@if(userInfo != null && company != null && userInfo.Roles != null)
			{
				<h5 class="text-center">Welcome, @userInfo.Roles.FirstOrDefault() @userInfo.FullName</h5>
				<h5 class="text-center">@company.Name</h5>
			}
		</div>
	</div>
</div>


@code {
	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;

	private IEnumerable<UserDTO>? members { get; set; }

	private IEnumerable<UserDTO>? projectMembers { get; set; }

	private UserDTO? selectedMember { get; set; }

	private UserDTO? selectedManager { get; set; }

	private CompanyDTO? company { get; set; }

	private IEnumerable<ProjectDTO> projects = [];

	private IEnumerable<ProjectDTO> archivedProjects = [];

	private ProjectDTO? project { get; set; }

	private ProjectDTO? SelectedProject { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

			if (userInfo != null)
			{
				int companyId = userInfo.CompanyId;

				company = await CompanyService.GetCompanyByIdAsync(companyId);

				projects = await ProjectService.GetAllProjectsAsync(companyId);

				archivedProjects = await ProjectService.GetArchivedProjects(companyId);

				members = await CompanyService.GetCompanyMembersAsync(companyId);
			}
		}
		catch (Exception)
		{

			throw;
		}
	}
}

