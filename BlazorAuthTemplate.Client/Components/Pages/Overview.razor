@page "/overview"

@rendermode InteractiveAuto

@inject IProjectService ProjectService
@inject ICompanyService CompanyService

<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

<div class="container-fluid mt-3">
	<div class="row">
		<div class="col-12 col-md-6">
			@if (company != null)
			{
				<h3 class="text-center text-md-start">@company.Name</h3>
			}
		</div>
		<div class="col-12 col-md-6">
			@if (userInfo != null)
			{
				<h3 class="text-center text-md-end">Welcome, @userInfo.FullName</h3>
			}
		</div>
	</div>
	<div class="row">
		<h4 class="mt-3">Active Projects:</h4>
		<div class="col-12 col-md-6">
			<div class="row">
				@foreach (var project in projects)
				{
					<div class="col-6 col-md-3">
						<div class="card mb-3" style="width: 100%; height: 12rem;">
							<div class="card-body">
								<h5 style="display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden;" class="card-title oneline-text">
									@project.Name
								</h5>
								@if (members != null)
								{
									<h6>@members.Count() Members</h6>
								}
								@if (project.Tickets != null)
								{
									<h6>@project.Tickets.Count() Tickets</h6>
								}
								<a href="#" class="btn btn-primary">Details</a>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
		<h4 class="mt-3">Archived Projects:</h4>
		<div class="col-12 col-md-6">
			<div class="row">
				@foreach (var project in archivedProjects)
				{	
					<div class="col-6 col-md-3">
						<div class="card mb-3" style="width: 100%; height: 12rem;">
							<div class="card-body">
								<h5 style="display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden;" class="card-title oneline-text">
									@project.Name
								</h5>
								@if (members != null)
								{
									var projectManager = members.Where(m => m.Role != null && m.Role.Contains("ProjectManager")).FirstOrDefault();
									if(projectManager != null)
									{
										<h6>Project Manager: @projectManager.FullName</h6>
									}
									<h6>@members.Count() Members</h6>
								}
								@if (project.Tickets != null)
								{
									<h6>@project.Tickets.Count() Tickets</h6>
								}
								<a href="#" class="btn btn-primary">Details</a>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
</div>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;

	private IEnumerable<UserDTO>? members { get; set; }

	private IEnumerable<UserDTO>? projectMembers { get; set; }

	private UserDTO? selectedMember { get; set; }

	private UserDTO? selectedManager { get; set; }

	private CompanyDTO? company { get; set; }

	private IEnumerable<ProjectDTO> projects = [];

	private IEnumerable<ProjectDTO> archivedProjects = [];

	private ProjectDTO? project { get; set; }

	private ProjectDTO? SelectedProject { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

			if (userInfo != null)
			{
				int companyId = userInfo.CompanyId;

				company = await CompanyService.GetCompanyByIdAsync(companyId);

				projects = await ProjectService.GetAllProjectsAsync(companyId);

				archivedProjects = await ProjectService.GetArchivedProjects(companyId);

				members = await CompanyService.GetCompanyMembersAsync(companyId);
			}
		}
		catch (Exception)
		{

			throw;
		}
	}
}

