@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.Client.Services.Interfaces
@using static BlazorAuthTemplate.Models.Enums

@inject IProjectService ProjectService

@if (projectForm is not null)
{
	<EditForm Model="projectForm" OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator />

		<div class="mb-2">
			<label class="form-label">Name</label>
			<InputText class="form-control" @bind-Value="projectForm.Name" />
			<ValidationMessage For="() => projectForm.Name" />
		</div>
		<div class="mb-2">
			<label class="form-label">Description</label>
			<InputTextArea class="form-control" @bind-Value="projectForm.Description" />
			<ValidationMessage For="() => projectForm.Description" />
		</div>
		<div class="mb-2">
			<label class="form-label">Priority</label>
			<InputSelect class="form-select" @bind-Value="projectForm.Priority">
				@foreach (var priority in Enum.GetValues(typeof(ProjectPriority)).Cast<ProjectPriority>())
				{
					<option value="@priority">@priority</option>
				}
			</InputSelect>
			<ValidationMessage For="() => projectForm.Priority" />
		</div>
		<div class="mb-2">
			<label class="form-label">Start Date</label>
			<input type="date" @bind-value="projectForm.StartDate" />
			<ValidationMessage For="() => projectForm.StartDate" />
		</div>
		<div class="mb-2">
			<label class="form-label">Start Date</label>
			<input type="date" @bind-value="projectForm.EndDate" />
			<ValidationMessage For="() => projectForm.EndDate" />
		</div>
		<div class="mb-2">
			<label class="form-label">Archive Project</label>
				<InputCheckbox @bind-Value="projectForm.IsArchived" />
			
			<ValidationMessage For="() => projectForm.IsArchived" />
		</div>

		<button class="btn btn-success" type="submit">
			Save
		</button>

		<button @onclick="() => CancelEdit()" class="btn btn-warning mt-1">
			Reset
		</button>

	</EditForm>
}




@code {
	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }


	[Parameter, EditorRequired]
	public ProjectDTO? Project { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<ProjectDTO> OnSubmit { get; set; }

	[Parameter]
	public EventCallback OnCancel { get; set; }

	private ProjectDTO? projectForm;

	private ProjectDTO? clonedProject;

	public ProjectPriority priority { get; set; }

	private UserInfo? userInfo;

	protected override async Task OnInitializedAsync()
	{
		userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
		if (userInfo != null)
		{
			int companyId = userInfo.CompanyId;

			if (Project != null)
			{
				projectForm = CloneProject(Project);

				clonedProject = CloneProject(Project);
			}
		}
	}

	protected override void OnParametersSet()
	{
		if (Project != null)
		{
			projectForm = CloneProject(Project);

			clonedProject = CloneProject(Project);
		}
	}

	public async Task HandleSubmit()
	{
		await OnSubmit.InvokeAsync(projectForm);
	}

	public async Task CancelEdit()
	{
		projectForm = clonedProject;

		await OnCancel.InvokeAsync();
	}

	private ProjectDTO CloneProject(ProjectDTO project)
	{
		return new ProjectDTO
			{
				Id = Project.Id,
				Name = Project.Name,
				Description = Project.Description,
				Priority = Project.Priority,
				StartDate = Project.StartDate,
				EndDate = Project.EndDate,
				IsArchived = Project.IsArchived
			};
	}
}
