@inject ITicketService TicketService
@inject IProjectService ProjectService

@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.Client.Services.Interfaces

<h3>@Project?.Name Details</h3>
<h5>Archived:</h5>
@if (Project?.IsArchived == true)
{
	<p>Yes</p>
}
else
{
	<p>No</p>
}
<h5>Created:</h5> @Project?.Created.ToLocalTime().DateTime <h5>Start Date:</h5> @Project?.StartDate.ToLocalTime().DateTime <h5>End Date:</h5> @Project?.EndDate.ToLocalTime().DateTime
<h5>Priority: @Project?.Priority</h5>
<h5>Description:</h5>
<p>@Project?.Description</p>
<h3>Active Tickets:</h3>
@if (Project?.Tickets != null)
{
	int collapse = 1;
	<button class="btn btn-success mb-2" @onclick="() => status = Status.Adding">
		Add Ticket
	</button>

	@if (status == Status.Adding)
	{
		<TicketForm Ticket="newTicket" OnSubmit="AddTicket" OnCancel="CancelEdit" />
	}
	@foreach (var Ticket in Project.Tickets.Where(t => t.IsArchived == false))
	{
		<div class="accordion" id="ticketAccordion">
			<div class="accordion-item">
				<h2 class="accordion-header">
					<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@collapse">
						<h4>@Ticket.Title</h4>
					</button>
				</h2>
				<div id="collapse-@collapse" class="accordion-collapse collapse" data-bs-parent="#ticketAccordion">
					<div class="accordion-body">
						<div class="row">
							<div class="col-4">
								<h5>Created Date:</h5>
								<p>@Ticket.Created.ToLocalTime().DateTime</p>

								@if (Ticket.Updated is not null)
								{
									<h5>Updated Date:</h5>
									<p>@Ticket.Updated?.ToLocalTime().DateTime</p>
								}

								<h5>Archived:</h5>
								<p>@Ticket.IsArchived</p>
								<h5>Archived by Project:</h5>
								<p>@Ticket.IsArchivedByProject</p>
								<h5>Priority:</h5>
								<p>@Ticket.Priority</p>
								<h5>Ticket Type:</h5>
								<p>@Ticket.Type</p>
								<h5>Ticket Status:</h5>
								<p>@Ticket.Status</p>

								@if (Ticket.SubmitterUser is not null)
								{
									<h5>Submitter User:</h5>
									<p>@Ticket.SubmitterUser.FullName</p>
								}

								@if (Ticket.DeveloperUser is not null)
								{
									<h5>Developer User:</h5>
									<p>@Ticket.DeveloperUser.FullName</p>
								}

							</div>
							<div class="col-8">
								<h5>Description:</h5>
								<p>@Ticket.Description</p>
							</div>
							<div class="col">
								<button class="btn btn-warning" @onclick="() => EditTicket(Ticket)">
									Edit
								</button>
								<button class="btn btn-primary ms-3" @onclick="() => status = Status.AddingAttachment">
									Add Attachment
								</button>
							</div>

							@if (status == Status.AddingAttachment)
							{
								<TicketAttachmentForm TicketId="Ticket.Id" OnChange="HandleAttachment" />
							}

							@if (status == Status.Editing && selectedTicket is not null)
							{
								<TicketForm Ticket="selectedTicket" OnSubmit="UpdateTicket" OnCancel="CancelEdit" />
							}

							<TicketCommentArea TicketId="Ticket.Id" CompanyId="Project.CompanyId" Comments="Ticket.TicketComments" />

						</div>

					</div>
				</div>
			</div>
		</div>

		collapse++;
	}
	<h3>Archived Tickets:</h3>
	@foreach (var Ticket in Project.Tickets.Where(t => t.IsArchived == true))
	{
		<div class="accordion" id="ticketAccordion">
			<div class="accordion-item">
				<h2 class="accordion-header">
					<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@collapse">
						<h4>@Ticket.Title</h4>
					</button>
				</h2>
				<div id="collapse-@collapse" class="accordion-collapse collapse" data-bs-parent="#ticketAccordion">
					<div class="accordion-body">
						<div class="row">
							<div class="col-4">
								<h5>Created Date:</h5>
								<p>@Ticket.Created.ToLocalTime().DateTime</p>

								@if (Ticket.Updated is not null)
								{
									<h5>Updated Date:</h5>
									<p>@Ticket.Updated?.ToLocalTime().DateTime</p>
								}

								<h5>Archived:</h5>
								<p>@Ticket.IsArchived</p>
								<h5>Archived by Project:</h5>
								<p>@Ticket.IsArchivedByProject</p>
								<h5>Priority:</h5>
								<p>@Ticket.Priority</p>
								<h5>Ticket Type:</h5>
								<p>@Ticket.Type</p>
								<h5>Ticket Status:</h5>
								<p>@Ticket.Status</p>

								@if (Ticket.SubmitterUser is not null)
								{
									<h5>Submitter User:</h5>
									<p>@Ticket.SubmitterUser.FullName</p>
								}

								@if (Ticket.DeveloperUser is not null)
								{
									<h5>Developer User:</h5>
									<p>@Ticket.DeveloperUser.FullName</p>
								}

							</div>
							<div class="col-8">
								<h5>Description:</h5>
								<p>@Ticket.Description</p>
								<img src="@Ticket.TicketAttachments" />
							</div>
							<div class="col">
								<button class="btn btn-warning" @onclick="() => EditTicket(Ticket)">
									Edit
								</button>
								<button class="btn btn-primary ms-3" @onclick="() => status = Status.AddingAttachment">
									Add Attachment
								</button>
							</div>

							@if(status == Status.AddingAttachment)
							{
								<TicketAttachmentForm TicketId="Ticket.Id" OnChange="HandleAttachment"/>
							}

							@if (status == Status.Editing && selectedTicket is not null)
							{
								<TicketForm Ticket="selectedTicket" OnSubmit="UpdateTicket" OnCancel="CancelEdit" />
							}

							<TicketCommentArea TicketId="Ticket.Id" CompanyId="Project.CompanyId" Comments="Ticket.TicketComments" />

						</div>

					</div>
				</div>
			</div>
		</div>

		collapse++;
	}
}
else
{
	<p>No tickets available.</p>
}

<h5>Members:</h5>
@if (Project?.Members != null)
{
	@foreach (var Member in Project.Members)
	{
		<p>@Member.FirstName @Member.LastName</p>
	}
}
else
{
	<p>No members available.</p>
}

@code {

	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	[Parameter, EditorRequired]
	public ProjectDTO? Project { get; set; }

	public IEnumerable<TicketDTO>? tickets { get; set; }

	public TicketDTO? newTicket { get; set; }

	public TicketDTO? selectedTicket { get; set; }

	private Status status = Status.Viewing;

	UserInfo? userInfo { get; set; }

	private TicketAttachmentDTO newAttachment = new();
	private IBrowserFile? newFile;

	private enum Status
	{
		Viewing,
		Editing,
		Adding,
		AddingAttachment
	}

	protected override async Task OnInitializedAsync()
	{
		newTicket = new();

		userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

		newTicket.SubmitterUserId = userInfo?.UserId;

		newTicket.ProjectId = Project!.Id;
	}

	private void EditTicket(TicketDTO ticket)
	{
		selectedTicket = ticket;
		status = Status.Editing;
	}

	public async Task UpdateTicket(TicketDTO updatedTicket)
	{
		selectedTicket.Title = updatedTicket.Title;
		selectedTicket.Description = updatedTicket.Description;
		selectedTicket.Priority = updatedTicket.Priority;
		selectedTicket.Type = updatedTicket.Type;
		selectedTicket.SubmitterUserId = updatedTicket.SubmitterUserId;
		selectedTicket.Project = updatedTicket.Project;
		selectedTicket.Status = updatedTicket.Status;

		if (userInfo != null)
		{
			try
			{
				await TicketService.UpdateTicketAsync(selectedTicket, userInfo.CompanyId, userInfo.UserId);
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
				throw;
			}

		}

		status = Status.Viewing;
	}

	public async Task AddTicket(TicketDTO newTicket)
	{

		int companyId = userInfo!.CompanyId;

		try
		{
			await TicketService.AddTicketAsync(newTicket, companyId);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
		status = Status.Viewing;

		Project = await ProjectService.GetProjectByCompanyId(Project!.Id, companyId);
	}

	private void CancelEdit()
	{
		status = Status.Viewing;
	}

	private void HandleAttachment()
	{
		Console.WriteLine("Attachment added, ticket details updated.");
	}
}