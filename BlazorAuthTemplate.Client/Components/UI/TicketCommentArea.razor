@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.Client.Services.Interfaces

@inject ITicketService TicketService
@inject NavigationManager Nav

<div id="comments">
	<div class="d-flex">
		<h2 class="h1 py-lg-1 py-xl-3 text-nowrap me-auto">
			@(Comments.Count() == 1 ? "1 comment" : $"{Comments.Count()} comments")
		</h2>
		<div>
			<button class="btn btn-link px-0" data-bs-toggle="collapse" data-bs-target="#newCommentForm">
				Leave a comment
			</button>
			<a class="btn btn-link px-0" href="@Nav.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> {["ReturnUrl"] = Nav.Uri})">
				Login to comment
				<i class="ai-chevron-right fs-lg ms-1"></i>
			</a>
		</div>

		<div class="collapse p-3" id="newCommentForm">
			<TicketCommentForm Comment="newComment" OnSubmit="HandleAddComment" />
		</div>


		@if (Comments.Count() == 0)
		{
			<div class="text-center py-5 text-muted fs-4">
				No comments yet!
			</div>
		}else
		{
			foreach(TicketCommentDTO comment in Comments.OrderByDescending(c => c.Created))
			{
				<TicketCommentListItem OnEdit="HandleEditComment" OnDelete="HandleDeleteComment" Comment="comment" Editable="comment.UserId == userInfo?.UserId" />
				<p>@comment.Content - @comment.User.FullName @comment.Created</p>
			}
		}

	</div>
</div>



@code {

	[Parameter, EditorRequired]
	public int TicketId { get; set; }

	[Parameter, EditorRequired]
	public int CompanyId { get; set; }

	[Parameter]
	public IEnumerable<TicketCommentDTO>? Comments { get; set; }

	[CascadingParameter]
	public Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;

	private TicketCommentDTO newComment = new TicketCommentDTO();

	protected override async Task OnParametersSetAsync()
	{
		userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
	}

	private async Task HandleAddComment(TicketCommentDTO comment)
	{
		try
		{
			comment.TicketId = TicketId;
			comment.UserId = userInfo!.UserId;

			await TicketService.AddCommentAsync(comment, CompanyId);

			Comments = await TicketService.GetTicketCommentsAsync(TicketId, CompanyId);
			newComment = new TicketCommentDTO();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private async Task HandleEditComment(TicketCommentDTO comment)
	{
		try
		{
			if(comment.UserId == userInfo!.UserId || userInfo.Roles.Any(r => r == "Author" || r == "Moderator"))
			{
				await TicketService.UpdateCommentAsync(comment, CompanyId, userInfo!.UserId);
				Comments = await TicketService.GetTicketCommentsAsync(TicketId, CompanyId);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private async Task HandleDeleteComment(TicketCommentDTO comment)
	{
		try
		{
			if (comment.UserId == userInfo!.UserId || userInfo.Roles.Any(r => r == "Author" || r == "Moderator"))
			{
				await TicketService.DeleteCommentAsync(comment.Id, CompanyId);
				Comments = await TicketService.GetTicketCommentsAsync(TicketId, CompanyId);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}


}
