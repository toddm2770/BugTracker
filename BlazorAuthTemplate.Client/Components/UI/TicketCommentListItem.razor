@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Client.Models
@using BlazorAuthTemplate.Client.Services.Interfaces


@inject ITicketService TicketService

@if (Comment is not null)
{
	<div class="border-bottom py-4 mt-2 mb-4">
		<img class="rounded-circle" src="@(Comment.User!.ImageUrl ?? ImageHelper.DefaultProfilePicture)" width="48" alt="Comment author image" />
		<div class="ps-3">
			<h6 class="mb-0">@Comment.User.FullName</h6>
			<span class="fs-sm text-body-secondary">
				@Comment.Created.ToString("g");
			</span>
		</div>
	</div>
	
	@if(status == Status.Viewing)
	{
		<p class="pb-2 mb-0">
			@Comment.Content
		</p>

		<AuthorizeView>
			@if (Editable || context.User.IsInRole("Author") || context.User.IsInRole("Moderator"))
			{
				<div class="hstack gap-2">
					<button class="nav-link fs-sm fw-semibold px-0 py-2" type="button" @onclick="BeginEdit">
						<i class="ai-pencil" aria-label="edit"></i>
					</button>
					<span class="text-muted">|</span>
					<button class="nav-link fs-sm fw-semibold px-0 py-2 text-danger" type="button" @onclick="() => status = Status.Deleting">
						<i class="ai-trash" aria-label="Delete"></i>
					</button>
				</div>
			}
		</AuthorizeView>

	}
	else if(status == Status.Deleting)
	{
		<p class="pb-2" mb-0>
			@Comment.Content
		</p>
		<div class="hstack gap-2">
			<span class="text-danger">Are you sure you want to delete this comment?</span>
			<button class="btn btn-sm btn-danger fs-sm py-1 px-2" type="button" @onclick="HandleDelete">
				Delete
			</button>
			<button class="btn btn-sm btn-outline-secondary fs-sm py-1 px-2" type="button" @onclick="() => status = Status.Viewing">
				Cancel
			</button>
		</div>
	}
	else if(status == Status.Editing)
	{
		<EditForm Model="editComment" OnValidSubmit="HandleEdit">
			<DataAnnotationsValidator />
			<InputTextArea @bind-Value="editComment.Content" class="form-control mb-2" rows="3" />
			<div class="hstack gap-2">
				<button class="nav-link fs-sm px-0 py-2" type="submit">
					<i class="ai-check text-success me-1"></i>
					Save
				</button>
				<span class="text-muted">|</span>
				<button class="nav-link fs-sm px-0 py-2" type="button" @onclick="() => status = Status.Viewing">
					<i class="ai-circle-x text-danger me-1"></i>
					Cancel
				</button>
			</div>
		</EditForm>
	}
}


@code {

	[Parameter, EditorRequired]
	public TicketCommentDTO? Comment { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<TicketCommentDTO> OnEdit { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<TicketCommentDTO> OnDelete { get; set; }

	[Parameter, EditorRequired]
	public bool Editable { get; set; }

	private enum Status
	{
		Viewing,
		Editing,
		Deleting
	}

	private Status status = Status.Viewing;

	private TicketCommentDTO? editComment;

	private void BeginEdit()
	{
		if(Comment == null)
		{
			return;
		}

		status = Status.Editing;

		editComment = new()
		{
			Id = Comment.Id,
			UserId = Comment.UserId,
			TicketId = Comment.TicketId,
			Content = Comment.Content
		};
	}

	private async Task HandleEdit()
	{
		if(editComment == null)
		{
			return;
		}

		await OnEdit.InvokeAsync(editComment);

		status = Status.Viewing;
	}

	private async Task HandleDelete()
	{
		if(Comment == null)
		{
			return;
		}

		await OnDelete.InvokeAsync(Comment);
		status = Status.Viewing;
	}



}